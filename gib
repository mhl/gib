#!/usr/bin/env python3
# -*- mode: python -*-

# Copyright (c) 2007 Jean-Francois Richard <jean-francois@richard.name>
#           (c) 2008 Mauricio Fernandez <mfp@acm.org>
#           (c) 2009, 2010, 2011, 2012 Mark Longair <mark-gib@longair.net>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see
# <http://www.gnu.org/licenses/>.

# ------------------------------------------------------------------------

# The script reimplements some of the "gibak" script in Python 3.1,
# and changes its behaviour in a couple of key respects.

# The intended usage of this script is to be able to backup arbitrary
# directories from different computers to the same git repository kept
# on a portable USB hard disk, where there is a branch in the
# repository for each directory.  This is very efficient in terms of
# disk space where lots of data is redundantly stored on different
# systems or in different directories.

# On each invocation of the script, first the directory to backup is
# decided on.  This is done by the following steps:
#
#   - If a directory is specified with the --directory / -d option,
#     then then back up that directory.
#
#   - Otherwise, assume that the directory to backup is the user's
#     home directory (found from the HOME environment variable).

# Next, the script decides the git repository to which the directory's
# current state will be committed.  That is chosen by the following
# steps:
#
#   - If a repository is specified with the --git-dir / -g option,
#     then use that repository.
#
#   - If the config file .gib.conf exists in the directory to backup
#     and contains a 'git-dir' entry, use that value.
#
#   - Otherwise, default to a '.git' directory in the directory to
#     backup.

# The script must finally decide which branch to commit a new
# directory state to.  That is chosen in the following way:
#
#   - If a branch is specified via the --branch / -b option, then that
#     branch name is used.
#
#   - If the config file .gibak.conf exists in the directory to backup
#   - and contains a 'branch' entry, use that value.
#
#   - Otherwise, default to 'master'.

# The defaults will thus be like gibak's original intended usage - you
# are backing up your home directory, using ~/.git as the repository
# and 'master' as the branch to use.

# TODO:
#
# - use a lockfile to prevent multiple concurrent instances, in
#   particular because each invocation may update HEAD
#
# - take out the git-status after committing, and disply just
#   modified and untracked files
#
# - add the "find-in-repository.py" functionality to this script?
#
# - we must maintain a separate config file for each repository - the
#   submodule entries will be different for each host you're backing
#   up.
#
# - create a xapian database (or something similar) for faster lookup
#   of files in the backup repository
#
# - also see FIXMEs below

from configparser import RawConfigParser
from optparse import OptionParser
from subprocess import call, check_call, check_output, Popen, PIPE
import sys
import re
import os

from general import (
    mkdir_p, run_with_option_or_abort, get_real_name, ensure_trailing_slash,
    current_date_and_time_string, shellquote, file_iter_bytes_records,
    map_filename_for_directory_change
)
from errors import Errors
from githelpers import (
    probable_non_bare_repository, is_in_another_git_repository
)
from gitsetup import GibSetup

original_current_directory = os.getcwd()

default_encoding = sys.getdefaultencoding()
filename_decode_warning = "Warning: ignoring filename that couldn't be decoded with {}:".format(default_encoding)

usage_message = '''Usage: %prog [OPTIONS] COMMAND

COMMAND must be one of:

    init
    commit
    eat FILES-OR-DIRECTORIES...
    show FILE [COMMIT]
    extract PATH DESTINATION-DIRECTORY [COMMIT]
    restore [COMMIT]
    update-file-list
    git -- [GIT-COMMAND]'''

parser = OptionParser(usage=usage_message)
parser.add_option('--directory','-d',
                  dest="directory",
                  default=None,
                  help="directory to backup")
parser.add_option('--git-dir','-g',
                  dest="git_directory",
                  default=None,
                  help="git directory for backup (for advanced use)")
parser.add_option('--branch','-b',
                  dest="branch",
                  default=None,
                  help="branch to add new directory state to (for advanced use)")
options,args = parser.parse_args()

setup = GibSetup(options)

# Check that git is on your PATH and find the version:

output = run_with_option_or_abort("git")
m = re.search('^git version (.*)$',output)
if not m:
    print("The git version string ('{}') was of an unknown format".format(output),file=sys.stderr)
    sys.exit(Errors.VERSION_ERROR)
git_version = m.group(1).strip()

def int_or_still_string(s):
    try:
        return int(s,10)
    except ValueError:
        return s

# FIXME: In fact, this doesn't work for versions like "1.6.6.197.gee6f"

git_version_split = [ int_or_still_string(x) for x in git_version.split('.') ]

required_git_version = [ 1, 7, 0, 3 ]
required_git_version_string = ".".join([ str(x) for x in required_git_version ])
required_git_version_reason = """(Earlier versions have not been tested, but may work.)"""

if not git_version_split >= required_git_version:
    print("Your git version is {}, version {} is required:".format(git_version,required_git_version_string),file=sys.stderr)
    print(required_git_version_reason,file=sys.stderr)
    sys.exit(Errors.VERSION_ERROR)

# Check that the necessary helper programs are also on the user's path:

for p in ( 'find-git-files', 'find-git-repos', 'ometastore', 'rsync' ):
    run_with_option_or_abort(p,'--help')

os.chdir(setup.get_directory_to_backup())

# Set a umask so that everything we create is only readable by the user:

old_umask = os.umask(0o077)

if len(args) < 1:
    parser.print_help()
    print("No command found",file=sys.stderr)
    sys.exit(Errors.USAGE_ERROR)

command = args[0]

# We deal with the "init" command separately, since it doesn't require
# that our pre-conditions (e.g. the repository and branch existing)
# are met before running:

def init():
    '''A method that carries out the "init" command'''
    global configuration
    print("Initializing for backup:")
    print("and git directory "+setup.get_git_directory())
    if setup.git_initialized():
        setup.abort_unless_no_auto_gc()
        # We will always set the work tree when using this repository:
        setup.abort_unless_particular_config('core.bare','false')
    else:
        mkdir_p(setup.get_git_directory())
        check_call(setup.git(["init"]))
        # We override core.worktree anyway, and it may be confusing to
        # leave this config option in the repository, since the same
        # repository may be used with many different work trees.
        setup.unset_config_value("core.worktree")
        setup.set_config_value("gc.auto","0")

    default_user_name = get_real_name()
    if not setup.config_value("user.name"):
        setup.set_config_value("user.name",default_user_name)

    # Switch HEAD to point to our branch, even though it shouldn't
    # exist yet:

    setup.set_HEAD_to(setup.get_branch())

    # If it does exist, then something is wrong:

    if setup.check_ref("HEAD"):
        print("You're using init and the specified branch ({}) seems to already exist.".format(setup.get_branch()),file=sys.stderr)
        sys.exit(Errors.BRANCH_EXISTS_ON_INIT)

    # Now empty the index:
    check_call(["rm","-f",os.path.join(setup.get_git_directory(),"index")])

    if not os.path.exists(".gitignore"):
        fp = open(".gitignore","w")
        fp.write('''# Here are some examples of what you might want to ignore
# in your git-home-history.  Feel free to modify.
#
# The rules are read from top to bottom, so a rule can
# "cancel" out a previous one.  Be careful.
#
# For more information on the syntax used in this file,
# see "man gitignore" in a terminal or visit
# http://www.kernel.org/pub/software/scm/git/docs/gitignore.html
''')

    # Create the configuration file:
    configuration = RawConfigParser()
    configuration.add_section('repository')
    configuration.set('repository','git_directory',setup.get_git_directory())
    configuration.set('repository','branch',setup.get_branch())

    with open(setup.configuration_file, 'w') as cffp:
        configuration.write(cffp)

    check_call(setup.git(["add","-f",".gitignore",setup.configuration_file]))
    check_call(setup.git(["commit","-q","-a","-mInitialized by "+setup.get_invocation()]))

    suggestion = '''You might be interested in tweaking the file:

  {}

Please run "{} commit" to save a first state in your history'''

    print(suggestion.format(os.path.join(setup.get_directory_to_backup(),'.gitignore'),
                            setup.get_invocation()))

if command == "init":
    init()
    sys.exit(0)

def abort_unless_HEAD_exists():
    if not setup.check_ref("HEAD"):
        print("The branch you are trying to back up to does not exist.",file=sys.stderr)
        print("(Perhaps you haven't run \"{} init\")".format(setup.get_invocation()),file=sys.stderr)
        sys.exit(Errors.NO_SUCH_BRANCH)

# All the other commands require the repository to be initialized and
# the branch to already exist:

setup.abort_if_not_initialized()

if not setup.currently_on_correct_branch():
    setup.switch_to_correct_branch()

# (If we were already on that branch, assume that the index matches
# appropriately.)

setup.abort_unless_HEAD_exists()
setup.abort_unless_no_auto_gc()

def handle_git_repositories(start_path=setup.get_directory_to_backup()):
    '''rsync the git repositories with working trees that are found
    under "start_path" to the 'git-repositories' subdirectory.  Also
    append information about that repository to .gitmodules so that it
    is recorded as a submodule.'''
    setup.abort_if_not_initialized()
    check_call(["rm","-f",".gitmodules"])
    base_directory = os.path.join(os.path.join(setup.get_git_directory(),"git-repositories",setup.get_branch()))
    mkdir_p(base_directory)
    for r in staged_submodules_iterator():
        r_dot_git = ensure_trailing_slash(os.path.join(r,".git"))
        relative_repository = re.sub('^/*','',r_dot_git)
        destination_repository = os.path.join(base_directory,relative_repository)
        mkdir_p(os.path.split(destination_repository)[0])
        print("rsyncing: {} ({}) => {}".format(r,r_dot_git,destination_repository),file=sys.stderr)
        check_call(["rsync","-rltD","--delete-after","--delay-updates",r_dot_git,destination_repository])
        fp = open(".gitmodules","a")
        fp.write('''[submodule "%s"]
    path = %s
    url = %s
''' % (r,r,destination_repository))
        fp.close()
    check_call(["touch",".gitmodules"])
    check_call(setup.git(["add","-f",".gitmodules"]))
    check_call(setup.git(["submodule","init"]))

def modified_or_untracked():
    '''Return all modified or untracked files.'''
    p = Popen(setup.git(["ls-files","-z","--modified","--others","--exclude-standard"]),stdout=PIPE)
    c = p.communicate()
    if p.returncode != 0:
        print("Finding the modified files failed",file=sys.stderr)
        sys.exit(Errors.GIT_COMMAND_FAILED)
    return [ x for x in c[0].decode().split('\0') if len(x) > 0 ]

def commit():
    setup.abort_if_not_initialized()

    print("Looking for git repositories that disappeared",file=sys.stderr)
    unstage_disappeared_submodules()

    print("Adding new and modified files.",file=sys.stderr)

    if 0 != call( setup.git( [ "add", "-v", "--ignore-errors", "." ] ) ):
        print("Warning: adding some files failed; check the output from git status below",file=sys.stderr)

    print("Removing deleted files from the repository",file=sys.stderr)
    check_call("{} ls-files --deleted -z | xargs -0 -r {} rm --cached --ignore-unmatch".format(
            setup.git_for_shell(),
            setup.git_for_shell()),
               shell=True)

    print("Using rsync to back up git repositories (not working trees)",file=sys.stderr)
    handle_git_repositories()

    # Previously we had a pre-commit hook that did this - now do it by
    # hand, since we need a different hook for each directory to back up:
    print("Record the permissions with ometastore",file=sys.stderr)
    check_call(["ometastore","-x","-s","-i","--sort"])
    check_call(setup.git(["add","-f",".ometastore"]))

    print("Committing the new state of "+setup.get_directory_to_backup(),file=sys.stderr)
    check_call( setup.git( [ "commit",
                       "-m",
                       "Committed on "+current_date_and_time_string() ] ))

def eat(files_to_eat):
    '''This method makes sure that the files listed in 'files_to_eat'
    all have their current versions backed-up and then removes them
    both from the directory to back-up and the repository'''
    if 0 != call(setup.git(["diff","--quiet","--cached"])):
        print("It looks as if you have some changes staged, and the \"eat\"",file=sys.stderr)
        print("command requires you to have nothing staged.",file=sys.stderr)
        print("(To see what's staged, try: \"{} diff --cached --stat\")".format(setup.git_for_shell()),file=sys.stderr)
        sys.exit(Errors.EATING_WITH_STAGED_CHANGES)
    check_call(setup.git(["add","-v","--"]+files_to_eat))
    # It's possible that the files we want to eat were already in the
    # last commit and exactly the same.  So, check whether adding them
    # to the index created any difference between the index and HEAD
    # in those files.  Only if it did, create a new commit:
    if 0 != call(setup.git(["diff","--quiet","--cached","--"]+files_to_eat)):
        commit_message = "Eating specified files on "+current_date_and_time_string()
        check_call(setup.git(["commit","-m",commit_message]))
    check_call(setup.git(["rm","-rf","--"]+files_to_eat))
    # The "git rm -rf" may leave empty directories, since git only
    # tracks files, so use "rm -rf" as well:
    check_call(["rm","-rfv","--"]+files_to_eat)
    commit_message = "Now removing eaten files on "+current_date_and_time_string()
    check_call(setup.git(["commit","-m",commit_message]))

def show(filename,ref=None):
    '''Output the contents of filename (the version in 'ref') to standard output.'''
    if not ref:
        ref = "HEAD"
    check_call(setup.git(["show",ref+":"+filename]))

def restore(ref):
    '''Restore the version of the tree in 'ref'.  This is potentially
    dangerous since it uses 'git reset --hard' to restore the files.'''
    check_call(setup.git(["reset","--hard",ref]))
    check_call(setup.git(["submodule","update","--init"]))
    check_call(["ometastore","-v","-x","-a","-i"])

def extract(path,destination_directory,ref=None):
    '''Extract only the tree (directory) at path to 'destination_directory'.
    'ref' specifies the revision to use for extracting the path from.'''
    if not ref:
        ref = "HEAD"
    tree = ref+":"+path
    if not setup.check_ref(ref):
        print("The commit '{}' could not be found".format(ref),file=sys.stderr)
        sys.exit(Errors.NO_SUCH_BRANCH)
    if not setup.check_tree(tree):
        print("The path {} in the repository was not a tree (directory)".format(path),file=sys.stderr)
        sys.exit(Errors.BAD_TREE)
    if not os.path.exists(destination_directory):
        print("The destination directory ({}) does not exist".format(destination_directory,),file=sys.stderr)
        sys.exit(Errors.USAGE_ERROR)
    if not os.path.isdir(destination_directory):
        print("The destination directory ({}) didn't seem to be a directory".format(destination_directory,),file=sys.stderr)
        sys.exit(Errors.USAGE_ERROR)
    # In order to apply the permissions with ometastore, make sure that we
    # extract that file first:
    ometastore_extracted = os.path.join(destination_directory,".ometastore")
    fd = os.open(ometastore_extracted,os.O_WRONLY|os.O_CREAT,0o600)
    with os.fdopen(fd) as fp:
        check_call(setup.git(["show",ref+":.ometastore"]),stdout=fp)
    extract_directory = os.path.join(destination_directory,path)
    mkdir_p(extract_directory)
    # Now extract the files:
    check_call("{} archive {} | tar -C {} -x".format(setup.git_for_shell(),
                                                     shellquote(tree),
                                                     shellquote(extract_directory)),
               shell=True)
    # Now apply the permissions from ometastore.
    # FIXME: at the moment ometastore can't apply permissions to a
    # partial tree, so comment this out for the moment:
    if False:
        check_call("cd {} && ometastore -v -x -a -i".format(shellquote(destination_directory)),
                   shell=True)

def committed_submodules_iterator(ref='HEAD'):
    submodule_re = r'^160000\s+commit\s+[0-9a-f]{40}\s+(.*)$'
    p0 = Popen(setup.git(["ls-tree","-r","-z","HEAD"]),stdout=PIPE)
    compiled_re = re.compile(submodule_re)
    for r in file_iter_bytes_records(p0.stdout,b'\0',b''):
        try:
            rs = r.decode()
        except:
            print(filename_decode_warning+"\n  "+str(r),
                  file=sys.stderr)
            continue
        m = compiled_re.match(rs)
        if m:
            yield(m.group(1))

def staged_submodules_iterator():
    submodule_re = r'^160000\s+[0-9a-f]{40}\s+[0-3]\s+(.*)$'
    p0 = Popen(setup.git(["ls-files","-s","-z"]),stdout=PIPE)
    compiled_re = re.compile(submodule_re)
    for r in file_iter_bytes_records(p0.stdout,b'\0',b''):
        try:
            rs = r.decode()
        except:
            print(filename_decode_warning+"\n  "+str(r),
                  file=sys.stderr)
            continue
        m = compiled_re.match(rs)
        if m:
            yield(m.group(1))

def unstage_disappeared_submodules():
    for s in staged_submodules_iterator():
        print("Considering submodule:",s)
        if probable_non_bare_repository(s):
            # It's possible that we can later run "git init" in a
            # directory above a submodule - if that seems to have
            # happened, also unstage this:
            if not is_in_another_git_repository(s):
                continue
        print("Unstaging the submodule: {}".format(s),file=sys.stderr)
        check_call(setup.git(["rm","--cached","--ignore-unmatch",s]))
        config_section = "submodule.{}".format(s)
        call(setup.git(["config","--remove-section",config_section]))

def update_file_list():
    directory = setup.get_file_list_directory()
    mkdir_p(directory)
    p_commits = Popen(setup.git(["rev-list", "--all"]), stdout=PIPE)
    for line in p_commits.stdout:
        commit = line.decode().strip()
        full_commit_date = check_output(
            setup.git(
                ['log', '-1', '--pretty=format:%ad', '--date=iso', commit]
            )).decode()
        date_match = re.search(r'^(\d{4}-\d{2}-\d{2})', full_commit_date)
        if not date_match:
            raise Exception("Unknown date format found: " + full_commit_date)
        file_list_leafname = date_match.group(1) + '-' + commit + '.txt'
        file_list_filename = os.path.join(
            directory,
            file_list_leafname)
        if not os.path.exists(file_list_filename):
            print("Creating the file list:", file_list_leafname)
            with open(file_list_filename, 'wb') as f:
                p = Popen(
                    setup.git(["ls-tree", "--name-only", "-r", commit]),
                    stdout=f
                )
                if p.wait() != 0:
                    message = "Finding files in commit {} failed"
                    raise Exception(message.format(commit))

# Process each of the possible commands apart from 'init':

if command == "commit":
    commit()
    print("After committing the new backup, git status is:",file=sys.stderr)
    print(Popen(setup.git(["status"]),stdout=PIPE).communicate()[0].decode())
    print(
        "Creating lists of files in backup in:",
        setup.get_file_list_directory(),
        file=sys.stderr
    )
    update_file_list()
elif command == "eat":
    if len(args) > 1:
        rewritten_paths = [ map_filename_for_directory_change(x,
                                                              original_current_directory,
                                                              setup.get_directory_to_backup())
                            for x in args[1:] ]
        eat(rewritten_paths)
    else:
        print("You must supply at least one file or directory to the \"eat\" command",file=sys.stderr)
        parser.print_help()
        sys.exit(Errors.USAGE_ERROR)
elif command == "show":
    if len(args) == 1:
        print("You must supply a filename to the \"show\" command",file=sys.stderr)
        parser.print_help()
        sys.exit(Errors.USAGE_ERROR)
    elif len(args) > 3:
        print("Too many arguments provided for the \"show\" command",file=sys.stderr)
        parser.print_help()
        sys.exit(Errors.USAGE_ERROR)
    else:
        rewritten_path = map_filename_for_directory_change(args[1],
                                                           original_current_directory,
                                                           setup.get_directory_to_backup())
        ref = None
        if len(args) == 3:
            ref = args[2]
        show(rewritten_path,ref)
elif command == "extract":
    if not (3 <= len(args) <= 4):
        parser.print_help()
        sys.exit(Errors.USAGE_ERROR)
    path, destination_directory = args[1:3]
    ref = None
    if len(args) == 4:
        ref = args[3]
    extract(path,destination_directory,ref)
elif command == "restore":
    if not (1 <= len(args) <= 2):
        parser.print_help()
        sys.exit(Errors.USAGE_ERROR)
    ref = setup.get_branch()
    if len(args) == 2:
        ref = args[1]
    confirmation_text = "Yes, I understand."
    print("\nThis will restore the backup to the directory: "+setup.get_directory_to_backup())
    print("... which would wipe out any changes in that directory and restore")
    print("it to the state of '{}' from repository {}".format(ref,setup.get_git_directory()))
    print("If you understand and want to continue, please type: \"{}\"".format(confirmation_text,))
    user_input = input()
    if(user_input == confirmation_text):
        restore(ref)
    else:
        print("'restore' cancelled.",file=sys.stderr)
elif command == "git":
    call(setup.git(args[1:]))
elif command == "update-file-list":
    update_file_list()
else:
    print("Unknown command '{}'".format(command),file=sys.stderr)
